version: "3.9"
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    image: frontend-dev
    container_name: frontend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: "wget -nv -t1 --spider 'http://localhost:3000/'"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: dev.Dockerfile
    image: backend-dev
    container_name: backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: "wget -nv -t1 --spider 'http://localhost:4000/'"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  db:
    image: postgres:16
    restart: unless-stopped
    container_name: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "kpd-db" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4:8.6
    container_name: pgadmin
    restart: unless-stopped
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    env_file:
      - .env
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  db-data:
  pgadmin-data:


